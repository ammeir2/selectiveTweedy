// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// computeFz
NumericVector computeFz(NumericVector z, NumericVector beta, bool log);
RcppExport SEXP _selectiveTweedy_computeFz(SEXP zSEXP, SEXP betaSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(computeFz(z, beta, log));
    return rcpp_result_gen;
END_RCPP
}
// rejectSampCpp
NumericVector rejectSampCpp(int maxsamp, int maxtries, double lthreshold, double uthreshold, NumericVector M, NumericVector theta, NumericVector beta);
RcppExport SEXP _selectiveTweedy_rejectSampCpp(SEXP maxsampSEXP, SEXP maxtriesSEXP, SEXP lthresholdSEXP, SEXP uthresholdSEXP, SEXP MSEXP, SEXP thetaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type maxsamp(maxsampSEXP);
    Rcpp::traits::input_parameter< int >::type maxtries(maxtriesSEXP);
    Rcpp::traits::input_parameter< double >::type lthreshold(lthresholdSEXP);
    Rcpp::traits::input_parameter< double >::type uthreshold(uthresholdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type M(MSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(rejectSampCpp(maxsamp, maxtries, lthreshold, uthreshold, M, theta, beta));
    return rcpp_result_gen;
END_RCPP
}
// mhSampler
NumericVector mhSampler(double init, NumericVector beta, double lthreshold, double uthreshold, double sampsd, int burnin, int trim, int nsamp, NumericVector tries);
RcppExport SEXP _selectiveTweedy_mhSampler(SEXP initSEXP, SEXP betaSEXP, SEXP lthresholdSEXP, SEXP uthresholdSEXP, SEXP sampsdSEXP, SEXP burninSEXP, SEXP trimSEXP, SEXP nsampSEXP, SEXP triesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type init(initSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type lthreshold(lthresholdSEXP);
    Rcpp::traits::input_parameter< double >::type uthreshold(uthresholdSEXP);
    Rcpp::traits::input_parameter< double >::type sampsd(sampsdSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type trim(trimSEXP);
    Rcpp::traits::input_parameter< int >::type nsamp(nsampSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tries(triesSEXP);
    rcpp_result_gen = Rcpp::wrap(mhSampler(init, beta, lthreshold, uthreshold, sampsd, burnin, trim, nsamp, tries));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_selectiveTweedy_computeFz", (DL_FUNC) &_selectiveTweedy_computeFz, 3},
    {"_selectiveTweedy_rejectSampCpp", (DL_FUNC) &_selectiveTweedy_rejectSampCpp, 7},
    {"_selectiveTweedy_mhSampler", (DL_FUNC) &_selectiveTweedy_mhSampler, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_selectiveTweedy(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
